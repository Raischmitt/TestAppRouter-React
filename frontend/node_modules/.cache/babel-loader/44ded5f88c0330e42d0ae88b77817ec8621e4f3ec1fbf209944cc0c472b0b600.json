{"ast":null,"code":"var _jsxFileName = \"/home/israel/exerciciosRai/TestAppRouter-React/frontend/src/page/Events.jsx\",\n  _s = $RefreshSig$();\nimport { useLoaderData, Await } from 'react-router-dom';\nimport { json, defer } from '@remix-run/router';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}\n_s(Events, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport default Events;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    return json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["useLoaderData","Await","json","defer","EventsList","jsxDEV","_jsxDEV","Events","_s","events","resolve","children","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["/home/israel/exerciciosRai/TestAppRouter-React/frontend/src/page/Events.jsx"],"sourcesContent":["import { useLoaderData, Await } from 'react-router-dom';\nimport { json, defer } from '@remix-run/router';\n\nimport EventsList from '../components/EventsList';\n\nfunction Events() {\n    const { events } = useLoaderData();\n\n    return <Await resolve={events}>\n        {(loadEvents) => <EventsList events={loadEvents} />}\n    </Await>;\n}\n\nexport default Events;\n\nasync function loadEvents() {\n    const response = await fetch(\"http://localhost:8080/events\");\n\n    if (!response.ok) {\n        return json(\n            { message: 'Could not fetch events' },\n            {\n                status: 500,\n            }\n        );\n    } else {\n        const resData = await response.json();\n        return resData;\n    }\n}\n\nexport function loader() {\n    return defer({\n        events: loadEvents(),\n    })\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AACvD,SAASC,IAAI,EAAEC,KAAK,QAAQ,mBAAmB;AAE/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,CAAC,CAAC;EAElC,oBAAOM,OAAA,CAACL,KAAK;IAACS,OAAO,EAAED,MAAO;IAAAE,QAAA,EACxBC,UAAU,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AACZ;AAACR,EAAA,CANQD,MAAM;EAAA,QACQP,aAAa;AAAA;AAAAiB,EAAA,GAD3BV,MAAM;AAQf,eAAeA,MAAM;AAErB,eAAeK,UAAUA,CAAA,EAAG;EACxB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,OAAOlB,IAAI,CACP;MAAEmB,OAAO,EAAE;IAAyB,CAAC,EACrC;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAChB,IAAI,CAAC,CAAC;IACrC,OAAOqB,OAAO;EAClB;AACJ;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACrB,OAAOrB,KAAK,CAAC;IACTM,MAAM,EAAEG,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAK,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}